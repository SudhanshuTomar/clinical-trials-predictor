Thanks for the clarification — this **changes the problem fundamentally**. Let's break it down clearly:

---

## 🧠 Problem Restatement

* **Train Data:**

  * Has a **categorical column** `outcome` → e.g., `Approved`, `Failed`
  * No `pts_percent` (numerical target) in train
* **Test Data:**

  * Has **no label**, and you're supposed to **predict a PTS score (%)**
* ✅ **Goal:** Learn from train set to predict **PTS %** for each test trial

---

## 🔍 What This Actually Is

This is a **binary classification to regression translation**:

* You have binary labels (`Approved = 1`, `Failed = 0`)
* But the real-world task is to **estimate the *probability of success*** for unseen trials — which **can be interpreted as a PTS score**

In simpler terms:

> **Train a classifier → Use predicted probabilities as PTS %.**

---

## ✅ Solution Strategy

### 1. **Convert `outcome` to numeric**

```python
df['outcome'] = df['outcome'].map({'Approved': 1, 'Failed': 0})
```

### 2. **Train a classifier (e.g., LightGBMClassifier)**

* Use binary classification
* Predict `probability of class 1 (success)` → that’s your **PTS %**

### 3. **Final output:**

```python
PTS % = model.predict_proba(test_X)[:, 1] * 100
```

---

## 🧩 Updated Modular Pipeline

I'll modify the previous pipeline accordingly:

```python
from sklearn.model_selection import train_test_split
import lightgbm as lgb
from sklearn.metrics import roc_auc_score, accuracy_score

# 1. Preprocess for classification
def preprocess_for_classification(df, date_col='start_date'):
    df = df.copy()
    df[date_col] = pd.to_datetime(df[date_col], errors='coerce', format='mixed')
    df['year'] = df[date_col].dt.year
    df = df.dropna(subset=[date_col])
    
    df['outcome'] = df['outcome'].map({'Approved': 1, 'Failed': 0})  # binary target

    for col in df.select_dtypes(include='object').columns:
        if col != date_col:
            df[col] = LabelEncoder().fit_transform(df[col].astype(str))
    return df


# 2. Train classifier
def train_classifier(train_df, val_df, target_col='outcome'):
    features = [col for col in train_df.columns if col not in [target_col, 'start_date', 'year']]
    train_X, val_X = train_df[features], val_df[features]
    train_y, val_y = train_df[target_col], val_df[target_col]

    clf = lgb.LGBMClassifier(n_estimators=500, learning_rate=0.05)
    clf.fit(train_X, train_y, eval_set=[(val_X, val_y)], early_stopping_rounds=50, verbose=100)

    return clf, features


# 3. Evaluate (optional)
def evaluate_classifier(clf, df, features, label='Validation'):
    probs = clf.predict_proba(df[features])[:, 1]
    preds = (probs > 0.5).astype(int)
    acc = accuracy_score(df['outcome'], preds)
    auc = roc_auc_score(df['outcome'], probs)
    print(f'{label} Accuracy: {acc:.4f}, AUC: {auc:.4f}')
    return probs


# 4. Run entire pipeline
def run_pts_prediction_pipeline(train_df, test_df, date_col='start_date'):
    print("✅ Preprocessing...")
    train_df = preprocess_for_classification(train_df, date_col)
    test_df  = preprocess_for_classification(test_df, date_col)

    print("✅ Splitting...")
    train_set, val_set = train_test_split(train_df, test_size=0.2, stratify=train_df['outcome'], random_state=42)

    print("✅ Training classifier...")
    clf, features = train_classifier(train_set, val_set)

    print("✅ Evaluating on validation set...")
    evaluate_classifier(clf, val_set, features)

    print("✅ Predicting on test set...")
    test_probs = clf.predict_proba(test_df[features])[:, 1]
    test_df['pts_percent'] = test_probs * 100

    return clf, test_df[['pts_percent']]
```

---

## ✅ Example Use:

```python
clf, pts_predictions = run_pts_prediction_pipeline(train_df, test_df)
```

This gives you the `pts_percent` column for the test set as requested.

---

## ✨ Why This Works

* You **don't need actual PTS % to train** — the model **learns probability of approval** from past trials
* Probabilities output by a well-calibrated classifier are **interpretable as PTS %**

Let me know if your use case involves **calibration**, **phases**, or **historical bias correction**, and I can guide you further.
